package me.zwad3.pseudosockettest;

import java.util.HashMap;
import java.util.Set;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.view.MotionEventCompat;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;

public class InterfaceView extends SurfaceView {

	private Bitmap button;
	private JoystickDrawer drawer;
	private SurfaceHolder holder;
	
	private MotionEvent me;
	
	private HashMap<Integer, MotionData> pointers = new HashMap<Integer, MotionData>();
	
	
	public InterfaceView(Context context) {
		super(context);
		button = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);
		drawer = new JoystickDrawer(this);
        holder = getHolder();
        holder.addCallback(new SurfaceHolder.Callback() {

               @Override
               public void surfaceDestroyed(SurfaceHolder holder) {
                      boolean retry = true;
                      drawer.setRunning(false);
                      while (retry) {
                             try {
                                   drawer.join();
                                   retry = false;
                             } catch (InterruptedException e) {
                             }
                      }
               }

               @Override
               public void surfaceCreated(SurfaceHolder holder) {
                      drawer.setRunning(true);
                      drawer.start();
               }

               @Override
               public void surfaceChanged(SurfaceHolder holder, int format,
                             int width, int height) {
               }
               
        });
        
		// TODO Auto-generated constructor stub
	}

	public void onMotionEvent(View v, MotionEvent me) {
		this.me = me;
		for (int p : pointers.keySet()) {
			pointers.get(p).setHit(false);
		}
		Log.d("FnF","----FIRING----");
		if (me != null) {
			int action = MotionEventCompat.getActionMasked(me);
			int point = MotionEventCompat.getPointerId(me,MotionEventCompat.getActionIndex(me));
			for (int i = 0; i < me.getPointerCount(); i++) {
				int p = me.getPointerId(i);
				switch (action) {
				case MotionEvent.ACTION_DOWN:
				case MotionEvent.ACTION_POINTER_DOWN:
					pointers.put(point,new MotionData(((int)MotionEventCompat.getX(me, point)),((int)MotionEventCompat.getY(me, point)),System.currentTimeMillis()));
					Log.d("FnF","Pointer: "+point+" - Down");
					break;
				case MotionEvent.ACTION_UP:
				case MotionEvent.ACTION_POINTER_UP:
				case MotionEvent.ACTION_OUTSIDE:
				case MotionEvent.ACTION_CANCEL:
					pointers.remove(point);
					Log.d("FnF","Pointer: "+point+" - Up");
					break;
				case MotionEvent.ACTION_MOVE:
					Log.d("FnF","Pointer: "+point+" - Moving");
					break;
				}
				/**if (me.getActionMasked() == me.ACTION_DOWN && me.getActionIndex() == i) {
					if (me.getX(i) < getWidth()/2) {
						lXf = ((int)me.getX());
						lYf = ((int)me.getY());
						
						lP = me.getPointerId(i);
						Log.d("FnF","pointer hold");
					} else {
						lXi = ((int)me.getX());
						lYi = ((int)me.getY());
						
						Log.d("FnF","pointer down");
						
						lP = me.getPointerId(i);
					}
				}**/
			}
		}
	}
	public String actionToString(int action) {
	    switch (action) {
	                
	        case MotionEvent.ACTION_DOWN: return "Down";
	        case MotionEvent.ACTION_MOVE: return "Move";
	        case MotionEvent.ACTION_POINTER_DOWN: return "Pointer Down";
	        case MotionEvent.ACTION_UP: return "Up";
	        case MotionEvent.ACTION_POINTER_UP: return "Pointer Up";
	        case MotionEvent.ACTION_OUTSIDE: return "Outside";
	        case MotionEvent.ACTION_CANCEL: return "Cancel";
	    }
	    return "";
	}
	public void draw(Canvas canvas) {
		int x = 0;
		int y = 0;
		/**for (int p : pointers.keySet()) {
			pointers.get(p).setHit(false);
		}**/
		if (me != null) {
			/**
			int action = MotionEventCompat.getActionMasked(me);
			int point = MotionEventCompat.getPointerId(me,MotionEventCompat.getActionIndex(me));
			for (int i = 0; i < me.getPointerCount(); i++) {
				int p = me.getPointerId(i);
				switch (action) {
				case MotionEvent.ACTION_DOWN:
				case MotionEvent.ACTION_POINTER_DOWN:
					pointers.put(point,new MotionData(((int)MotionEventCompat.getX(me, point)),((int)MotionEventCompat.getY(me, point)),System.currentTimeMillis()));
					Log.d("FnF","Pointer: "+point+" - Down");
					break;
				case MotionEvent.ACTION_UP:
				case MotionEvent.ACTION_POINTER_UP:
				case MotionEvent.ACTION_OUTSIDE:
				case MotionEvent.ACTION_CANCEL:
					pointers.remove(point);
					Log.d("FnF","Pointer: "+point+" - Up");
					break;
				case MotionEvent.ACTION_MOVE:
					Log.d("FnF","Pointer: "+point+" - Moving");
					break;
				}
				/**if (me.getActionMasked() == me.ACTION_DOWN && me.getActionIndex() == i) {
					if (me.getX(i) < getWidth()/2) {
						lXf = ((int)me.getX());
						lYf = ((int)me.getY());
						
						lP = me.getPointerId(i);
						Log.d("FnF","pointer hold");
					} else {
						lXi = ((int)me.getX());
						lYi = ((int)me.getY());
						
						Log.d("FnF","pointer down");
						
						lP = me.getPointerId(i);
					}
				}
			}**/
		
			
			
			int[] pos = new int[2];
			getLocationOnScreen(pos);
			x = (int) me.getX()-button.getWidth()/2 - pos[0];
			y = (int) me.getY()-button.getHeight()/2 - pos[1];
		}
		
		if (canvas != null) {
			canvas.drawColor(Color.BLACK);
			canvas.drawBitmap(button, x, y, null);
		}
		me = null;
	}
	
	

}
